@page
@model FabricJSDrawingWalkthrough.DrawingModel
@{
    ViewData["Title"] = "Drawing";
}

<h1>Make a Drawing!</h1>

<div class="row drawingToolbar bg-secondary text-light">
    <div class="btn-toolbar">
        <div class="btn-group mr-2" role="group">
            <div id="deleteComponent"></div>
        </div>
    </div>
    <div class="btn-toolbar">
        <label class="col-form-label controlLabel">Tools:</label>
        <div class="d-inline-block">
            <div class="btn-group btn-group-toggle" role="group" data-toggle="buttons" aria-label="Drawing Components">
                <div id="polylineDisplayComponent"></div>
                <div id="lineDisplayComponent"></div>
                <div id="rectangleDisplayComponent"></div>
                <div id="ovalDisplayComponent"></div>
                <div id="triangleDisplayComponent"></div>
                <div id="textDisplayComponent"></div>
            </div>
        </div>
    </div>
    <div class="separator"></div>
    <div class="btn-toolbar">
        <label class="col-form-label controlLabel d-inline">Size:</label>
        <div id="lineThicknessComponent"></div>

        <div class="separator"></div>

        <label class="col-form-label controlLabel d-inline">Style:</label>
        <div id="lineTypeComponent"></div>

        <div class="separator"></div>

        <label class="col-form-label controlLabel d-inline">Lines:</label>
        <div id="lineColorComponent"></div>

        <div class="separator"></div>

        <label class="col-form-label controlLabel ">Fill:</label>
        <div id="fillColorComponent"></div>
    </div>
</div>

<div class="row editorContainer">
    <div class="CanvasContainer">
        <div id="canvas"></div>
    </div>
</div>
<div class="row notificationBar noPrint">
    <div class="col">
        <div id="StatusBar" class="float-right"></div>
    </div>
</div>

@section Scripts{
    <script src="~/lib/fabric.js/fabric.min.js"></script>
    <script src="~/js/drawingEditor.js" asp-append-version="true"></script>
    <script>
        var editor;
        $(function () {
            //Calculate canvas height as a function of the window size.
            var canvasHeight = (window.innerHeight - $('#canvas').offset().top) * .9;
            var canvasWidth = $('#canvas').width();

            //Instantiate our new drawer
            //The canvas is created inside this constructor, using the selector passed.
            editor = new DrawingEditor('canvas', canvasHeight, canvasWidth);

            //Create a list of available display components
            const components = [
                { id: '#lineDisplayComponent', type: 'line' },
                { id: '#rectangleDisplayComponent', type: 'rect' },
                { id: '#ovalDisplayComponent', type: 'oval' },
                { id: '#triangleDisplayComponent', type: 'tria' },
                { id: '#textDisplayComponent', type: 'text' },
                { id: '#polylineDisplayComponent', type: 'polyline' },
                { id: '#deleteComponent', type: 'delete' },
                { id: 'fillColorComponent', type: 'fillColorChooser' },
                { id: 'lineColorComponent', type: 'lineColorChooser' },
                { id: 'lineTypeComponent', type: 'lineType' },
                { id: 'lineThicknessComponent', type: 'lineThickness' },
            ];

            //Add the components to the DrawingEditor, which will render them.
            editor.addComponents(components);
            $('#lineDisplayComponent').click();

            $("html").on('keydown', function (event) {
                const key = event.key;
                if (key == "Delete") {
                    editor.deleteSelected();
                }
            });
        });
    </script>
}